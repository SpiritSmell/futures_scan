#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import json
import logging
from packages.rabbitmq_producer_2_async import AsyncRabbitMQClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_rabbitmq_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ RabbitMQ."""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ base_config.yaml
    config = {
        'host': '192.168.192.42',
        'user': 'rmuser', 
        'password': 'rmpassword',
        'exchange': 'futures_price_collector_out'
    }
    
    logger.info("üöÄ Starting RabbitMQ connection test...")
    logger.info(f"üì° Connecting to: {config['host']} with user: {config['user']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = AsyncRabbitMQClient(
        host=config['host'],
        user=config['user'],
        password=config['password'],
        exchange=config['exchange']
    )
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'type': 'test',
            'timestamp': '2025-09-14T09:59:00Z',
            'data': {
                'message': 'Test message from crypto collector',
                'test_id': 12345
            },
            'source': 'test_script',
            'environment': 'development'
        }
        
        logger.info("üì¶ Sending test data to RabbitMQ...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        success = await client.send_to_rabbitmq(
            data=test_data,
            fanout=True
        )
        
        if success:
            logger.info("‚úÖ Test data sent successfully!")
            logger.info(f"üìä Data sent to exchange: {config['exchange']}")
        else:
            logger.error("‚ùå Failed to send test data!")
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.close_connection()
        
        return success
        
    except Exception as e:
        logger.error(f"üí• Error during RabbitMQ test: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    logger.info("=" * 60)
    logger.info("üîç RabbitMQ Connection Diagnostic Test")
    logger.info("=" * 60)
    
    success = await test_rabbitmq_connection()
    
    logger.info("=" * 60)
    if success:
        logger.info("‚úÖ RabbitMQ test PASSED - connection works!")
    else:
        logger.info("‚ùå RabbitMQ test FAILED - check connection settings!")
    logger.info("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
